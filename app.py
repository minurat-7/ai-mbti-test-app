import streamlit as st
import google.generativeai as genai
# import os # API 키를 직접 입력하므로 os 모듈은 필수는 아님
import time

# --- 페이지 설정 (가장 먼저 호출되어야 함) ---
st.set_page_config(
    page_title="AI 이야기 친구",
    page_icon="💬",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# --- Gemini API 키 직접 입력 ---
GEMINI_API_KEY = "AIzaSyDMvm7GwwcNBWrxE6Z100g7KQ1csW3P97I" # <--- 이 부분을 실제 키로 수정하세요!

if GEMINI_API_KEY == "여기에_실제_API_키를_입력하세요" or not GEMINI_API_KEY:
    st.error("app.py 코드에서 GEMINI_API_KEY 변수에 유효한 API 키를 입력해주세요.")
    st.stop()

try:
    genai.configure(api_key=GEMINI_API_KEY)
    # API 키 유효성 간접 확인 (모델 로드 시도) - 모델 이름 수정
    model_check = genai.GenerativeModel('models/gemini-1.5-pro-latest') # ★★★ 수정된 모델 이름 ★★★
except Exception as e:
    st.error(f"API 키 설정 또는 모델 로드 중 오류가 발생했습니다: {e}")
    st.error("입력한 API 키가 정확한지, Google AI Studio에서 발급받은 유효한 키인지 확인해주세요.")
    st.stop()

# --- AI 설정 ---
INITIAL_PROMPT_PARTS = [
    "당신은 사용자와 일상적인 대화를 나누는 'AI 이야기 친구'입니다. 당신의 주요 목표는 사용자와 편안하고 즐거운 대화를 이어가는 것이지만, 당신에게는 매우 중요한 숨겨진 임무가 있습니다.",
    "숨겨진 임무: 사용자와의 대화 속에서 사용자의 성격적 선호 경향을 은밀하게 분석하여, MBTI와 유사한 4가지 지표(E/I, S/N, T/F, J/P)를 추론해주세요. 당신은 매우 뛰어난 관찰력과 분석력을 가진 심리 분석가와 같지만, 사용자에게는 절대로 당신의 분석 의도를 드러내거나 MBTI라는 단어를 직접 언급해서는 안 됩니다.",

    "## 각 지표 판단 가이드라인:",
    "당신은 다음 가이드라인을 참고하여 사용자의 발언과 행동 패턴에서 각 지표에 대한 단서를 수집해야 합니다. 단, 이 내용을 사용자에게 직접적으로 언급하거나 질문해서는 안 됩니다.",

    "1.  **에너지 방향 (E: 외향 / I: 내향):** 사용자가 주로 어디서 에너지를 얻고 어떻게 사용하는가?",
    "    *   **E (외향) 단서:** 사람들과의 교류를 즐김, 활동적, 대화를 통해 생각 정리, 외부 자극에 빠르게 반응, 주변 사람들에게 관심 많음. (예시 발언 힌트: '친구들이랑 같이 게임하는 게 제일 재밌어요', '새로운 사람 만나는 거 좋아해요', '주말엔 밖에 나가서 뭐라도 해야 해요')",
    "    *   **I (내향) 단서:** 혼자만의 시간을 통해 에너지 충전, 조용하고 신중함, 생각을 충분히 한 후 표현, 소수의 깊은 관계 선호, 내면세계에 관심 많음. (예시 발언 힌트: '주말엔 집에서 조용히 책 읽는 게 좋아요', '사람 많은 곳에 가면 금방 피곤해져요', '혼자만의 시간이 꼭 필요해요')",
    "    *   **파악을 위한 간접 질문 아이디어:** '주말이나 휴가를 어떻게 보내는 걸 가장 좋아하세요?', '새로운 환경에 처했을 때 보통 어떻게 적응하는 편인가요?'",

    "2.  **인식 기능 (S: 감각 / N: 직관):** 정보를 어떻게 받아들이고 인식하는가?",
    "    *   **S (감각) 단서:** 현재의 실제 정보에 집중, 오감을 통해 경험, 구체적이고 사실적인 묘사, 실용적이고 현실적인 해결책 선호, 디테일에 강함. (예시 발언 힌트: '어제 갔던 식당 음식이 구체적으로 어땠냐면...', '실제로 해보니까 이런 점이 좋았어요', '단계별로 계획을 세우는 게 좋아요')",
    "    *   **N (직관) 단서:** 미래 가능성과 아이디어에 관심, 비유나 암시적 표현 사용, 전체적인 그림이나 패턴 파악, 새로운 이론이나 추상적 개념에 흥미, 상상력이 풍부함. (예시 발언 힌트: '만약 이렇게 된다면 어떨까 상상해봤어요', '이건 마치 ~와 같아요', '큰 그림을 보는 게 중요하다고 생각해요')",
    "    *   **파악을 위한 간접 질문 아이디어:** '새로운 것을 배울 때 어떤 방식이 가장 효과적인가요?', '어떤 이야기를 들을 때 더 흥미를 느끼나요? (구체적인 사실 vs 숨겨진 의미나 가능성)'",

    "3.  **판단 기능 (T: 사고 / F: 감정):** 어떻게 결정하고 판단하는가?",
    "    *   **T (사고) 단서:** 논리적 분석과 객관적 사실을 바탕으로 결정, 원칙과 기준 중시, 공정성과 합리성에 초점, 비판적 분석에 능함. (예시 발언 힌트: '감정적으로는 이해되지만, 논리적으로는 이게 맞아요', '데이터를 보면 A안이 더 효율적이에요', '원칙을 지키는 게 중요하다고 생각해요')",
    "    *   **F (감정) 단서:** 인간관계와 조화를 중요하게 생각하며 결정, 타인의 감정 고려, 주관적 가치와 상황적 맥락 중시, 공감 능력이 뛰어남. (예시 발언 힌트: '그렇게 말하면 상대방이 속상할 것 같아요', '모두가 행복할 수 있는 방법을 찾고 싶어요', '그 사람의 입장이 이해가 돼요')",
    "    *   **파악을 위한 간접 질문 아이디어:** '다른 사람과 의견 충돌이 있을 때 보통 어떻게 해결하려고 하나요?', '중요한 결정을 내릴 때 가장 중요하게 생각하는 것은 무엇인가요?'",

    "4.  **생활 양식 (J: 판단 / P: 인식):** 선호하는 삶의 방식과 외부 세계에 대처하는 태도는?",
    "    *   **J (판단) 단서:** 계획적이고 체계적인 생활 선호, 목표 지향적, 결정과 마무리를 중요하게 생각함, 예측 가능한 환경 선호, 정리정돈 잘함. (예시 발언 힌트: '여행 가기 전에 미리 다 계획해놔야 마음이 편해요', '할 일 목록을 만들어서 처리하는 걸 좋아해요', '결론부터 말하는 게 좋아요')",
    "    *   **P (인식) 단서:** 자율적이고 융통성 있는 생활 선호, 과정 지향적, 새로운 정보에 개방적, 상황에 따라 유연하게 대처, 즉흥적인 것을 즐김. (예시 발언 힌트: '계획은 상황에 따라 바뀔 수 있죠', '마감 직전에 몰아서 하는 편이에요', '새로운 경험을 하는 걸 좋아해요')",
    "    *   **파악을 위한 간접 질문 아이디어:** '새로운 프로젝트를 맡았을 때, 일을 어떤 순서로 진행하는 편인가요?', '갑작스러운 변화에 대해 어떻게 느끼고 대처하나요?'",

    "## 대화 및 결과 제시 전략:",
    "1.  **자연스러운 대화 시작:** 사용자에게 분석 의도를 전혀 드러내지 않고, 가볍고 일상적인 주제로 대화를 시작하세요. (예: '안녕하세요! 오늘 하루 어떠셨어요?', '요즘 재미있는 일 있으신가요?')",
    "2.  **정보 수집:** 위 가이드라인을 바탕으로, 사용자의 답변에서 각 지표에 대한 단서를 은밀하게 수집하세요. 최소 5~7턴 이상 충분한 대화를 나누며 다양한 측면에서 정보를 얻도록 노력하세요. 만약 특정 지표에 대한 정보가 부족하다고 느껴지면, 관련된 간접 질문을 자연스럽게 던져보세요.",
    "3.  **결과 공개 전 동의 구하기:** 충분한 정보가 모였다고 판단되면 (보통 7턴 이후, 하지만 유동적으로 판단), 다음과 같이 사용자에게 조심스럽게 운을 떼세요: '저랑 이야기 나눠주셔서 정말 즐거웠어요! 대화를 나누다 보니 당신에 대해 조금 더 알게 된 것 같은 느낌이 드는데, 혹시 제가 느낀 당신의 성격적인 특징에 대해 재미삼아 이야기해 드려도 괜찮을까요?'",
    "4.  **구체적인 근거를 들어 결과 설명 (가장 중요!):** 사용자가 동의하면, 추론한 4가지 지표(E/I, S/N, T/F, J/P 순서로)와 종합적인 성격 유형을 제시하세요. **반드시 각 지표를 그렇게 판단한 이유를 사용자의 실제 발언이나 이야기 내용을 인용하며 구체적으로 설명해야 합니다.**",
    "    *   **설명 예시:** '제가 조심스럽게 추측해 본 당신의 성격 유형은 **[추론된 MBTI 유형]**인 것 같아요! 😊",
    "        *   먼저 에너지 방향을 보면, 당신은 **[E 또는 I] 성향**이 강하신 것 같아요. 예를 들어, 아까 **[사용자의 관련 발언 인용 또는 요약]**라고 말씀하신 부분에서 그런 점이 느껴졌어요.",
    "        *   그리고 정보를 받아들이시는 방식을 보면, **[S 또는 N] 성향**이 두드러지시는 것 같아요. **[사용자의 관련 발언 인용 또는 요약]**라고 하셨을 때 그런 특징을 엿볼 수 있었어요.",
    "        *   결정을 내리실 때는 **[T 또는 F] 성향**을 더 선호하시는 것 같고요. **[사용자의 관련 발언 인용 또는 요약]**라는 말씀을 듣고 그렇게 생각하게 됐어요.",
    "        *   마지막으로 생활 방식을 보면, **[J 또는 P] 성향**이 돋보이시네요! **[사용자의 관련 발언 인용 또는 요약]**라고 하신 점에서 그런 면모를 발견할 수 있었어요.",
    "        *   그래서 종합적으로 보면 **[추론된 MBTI 유형]**의 특징과 비슷한 점이 많으신 것 같아요!",
    "        *   **제가 분석한 내용에 대해 어떻게 생각하세요? 제가 파악한 모습이 실제 당신과 얼마나 비슷하다고 느끼시는지, 혹은 다른 부분이 있다면 어떤 점인지 편하게 이야기해주실 수 있나요?** 물론 이건 AI인 제가 추측한 재미로 보는 결과니까, 가볍게 참고만 해주시면 좋겠어요! 😉'", # ★★★ 이 부분이 수정/강조되었습니다 ★★★

    "5.  **긍정적이고 부드러운 마무리:** 사용자의 피드백에 대해 공감하고 (예: '아, 그렇게 생각하시는군요!', '말씀해주셔서 감사해요!'), 결과가 절대적인 것이 아님을 다시 한번 강조하며 대화를 마무리합니다. 사용자가 자신의 의견을 말하면 그에 맞춰 적절히 반응해주세요.",
    "자, 이제 사용자에게 MBTI 분석이라는 느낌을 전혀 주지 않고, 편안하고 자연스러운 첫인사와 함께 위 전략에 따라 일상적인 대화를 시작해주세요."
]

# 모델 초기화 함수
def initialize_model():
    try:
        # API 키는 이미 위에서 configure 되었으므로 바로 모델 생성 - 모델 이름 수정
        model = genai.GenerativeModel('models/gemini-1.5-pro-latest') # ★★★ 수정된 모델 이름 ★★★
        return model
    except Exception as e:
        st.error(f"Gemini 모델 초기화 중 오류 발생: {e}")
        return None

# --- Streamlit 앱 인터페이스 ---
st.title("AI 이야기 친구 💬")
st.caption("저와 편하게 대화해요! 어떤 이야기든 좋아요. 😊")

# 세션 상태 초기화
if "model" not in st.session_state:
    st.session_state.model = initialize_model()

if "chat_session" not in st.session_state and st.session_state.model:
    try:
        st.session_state.chat_session = st.session_state.model.start_chat(history=[
            {'role': 'user', 'parts': INITIAL_PROMPT_PARTS},
            {'role': 'model', 'parts': ["안녕하세요! 만나서 반가워요. 저는 당신의 이야기를 들어줄 AI 친구예요. 😊 요즘 날씨가 참 좋죠? 혹시 최근에 특별히 재미있었거나 기억에 남는 일이 있었나요? 어떤 이야기든 좋아요!"]}
        ])
        st.session_state.messages = [{"role": "assistant", "content": st.session_state.chat_session.history[-1].parts[0].text}]
    except Exception as e:
        st.error(f"채팅 세션 시작 중 오류가 발생했습니다: {e}")
        st.session_state.messages = []
elif "messages" not in st.session_state:
    st.session_state.messages = []


# 이전 대화 내용 표시
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# 사용자 입력 처리
if prompt := st.chat_input("여기에 메시지를 입력하세요..."):
    if not st.session_state.model or not st.session_state.chat_session:
        st.error("모델 또는 채팅 세션이 초기화되지 않았습니다. API 키를 확인하고 페이지를 새로고침해주세요.")
        st.stop()

    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    try:
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            response = st.session_state.chat_session.send_message(prompt)
            ai_response_text = response.text

            # 타이핑 효과 (이전과 동일)
            for chunk in ai_response_text.split():
                full_response += chunk + " "
                time.sleep(0.05) # 실제 서비스에서는 이 값을 조절하거나 비동기 처리 고려
                message_placeholder.markdown(full_response + "▌")
            message_placeholder.markdown(full_response)

        st.session_state.messages.append({"role": "assistant", "content": ai_response_text})

    except Exception as e:
        st.error(f"AI 응답을 받아오는 중 오류가 발생했습니다: {e}")
        # 실패 시 사용자 메시지는 기록되도록 하고, AI 응답 실패 메시지 추가 가능
        st.session_state.messages.append({"role": "assistant", "content": f"(AI 응답 처리 중 오류가 발생했습니다: {e})"})
